// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/record_message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordService_CreateRecord_FullMethodName     = "/proto.RecordService/CreateRecord"
	RecordService_ChangeRecord_FullMethodName     = "/proto.RecordService/ChangeRecord"
	RecordService_RemoiveRecord_FullMethodName    = "/proto.RecordService/RemoiveRecord"
	RecordService_GetUserRecords_FullMethodName   = "/proto.RecordService/GetUserRecords"
	RecordService_GetUserFileInfos_FullMethodName = "/proto.RecordService/GetUserFileInfos"
)

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	CreateRecord(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*RecordResp, error)
	ChangeRecord(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*RecordResp, error)
	RemoiveRecord(ctx context.Context, in *RecordRemoveReq, opts ...grpc.CallOption) (*RecordResp, error)
	GetUserRecords(ctx context.Context, in *UserRecordsReq, opts ...grpc.CallOption) (*UserRecordsResp, error)
	GetUserFileInfos(ctx context.Context, in *UserFileInfosReq, opts ...grpc.CallOption) (*UserFileInfosResp, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) CreateRecord(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*RecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResp)
	err := c.cc.Invoke(ctx, RecordService_CreateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) ChangeRecord(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*RecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResp)
	err := c.cc.Invoke(ctx, RecordService_ChangeRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) RemoiveRecord(ctx context.Context, in *RecordRemoveReq, opts ...grpc.CallOption) (*RecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResp)
	err := c.cc.Invoke(ctx, RecordService_RemoiveRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetUserRecords(ctx context.Context, in *UserRecordsReq, opts ...grpc.CallOption) (*UserRecordsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRecordsResp)
	err := c.cc.Invoke(ctx, RecordService_GetUserRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetUserFileInfos(ctx context.Context, in *UserFileInfosReq, opts ...grpc.CallOption) (*UserFileInfosResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFileInfosResp)
	err := c.cc.Invoke(ctx, RecordService_GetUserFileInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility.
type RecordServiceServer interface {
	CreateRecord(context.Context, *RecordReq) (*RecordResp, error)
	ChangeRecord(context.Context, *RecordReq) (*RecordResp, error)
	RemoiveRecord(context.Context, *RecordRemoveReq) (*RecordResp, error)
	GetUserRecords(context.Context, *UserRecordsReq) (*UserRecordsResp, error)
	GetUserFileInfos(context.Context, *UserFileInfosReq) (*UserFileInfosResp, error)
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordServiceServer struct{}

func (UnimplementedRecordServiceServer) CreateRecord(context.Context, *RecordReq) (*RecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedRecordServiceServer) ChangeRecord(context.Context, *RecordReq) (*RecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRecord not implemented")
}
func (UnimplementedRecordServiceServer) RemoiveRecord(context.Context, *RecordRemoveReq) (*RecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoiveRecord not implemented")
}
func (UnimplementedRecordServiceServer) GetUserRecords(context.Context, *UserRecordsReq) (*UserRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecords not implemented")
}
func (UnimplementedRecordServiceServer) GetUserFileInfos(context.Context, *UserFileInfosReq) (*UserFileInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileInfos not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}
func (UnimplementedRecordServiceServer) testEmbeddedByValue()                       {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).CreateRecord(ctx, req.(*RecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_ChangeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).ChangeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_ChangeRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).ChangeRecord(ctx, req.(*RecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_RemoiveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).RemoiveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_RemoiveRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).RemoiveRecord(ctx, req.(*RecordRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetUserRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetUserRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_GetUserRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetUserRecords(ctx, req.(*UserRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetUserFileInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetUserFileInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_GetUserFileInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetUserFileInfos(ctx, req.(*UserFileInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _RecordService_CreateRecord_Handler,
		},
		{
			MethodName: "ChangeRecord",
			Handler:    _RecordService_ChangeRecord_Handler,
		},
		{
			MethodName: "RemoiveRecord",
			Handler:    _RecordService_RemoiveRecord_Handler,
		},
		{
			MethodName: "GetUserRecords",
			Handler:    _RecordService_GetUserRecords_Handler,
		},
		{
			MethodName: "GetUserFileInfos",
			Handler:    _RecordService_GetUserFileInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/record_message.proto",
}
